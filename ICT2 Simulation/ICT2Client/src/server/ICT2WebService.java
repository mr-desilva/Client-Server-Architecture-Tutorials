
package server;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ICT2WebService", targetNamespace = "http://server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ICT2WebService {


    /**
     * 
     * @param name
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hello", targetNamespace = "http://server/", className = "server.Hello")
    @ResponseWrapper(localName = "helloResponse", targetNamespace = "http://server/", className = "server.HelloResponse")
    @Action(input = "http://server/ICT2WebService/helloRequest", output = "http://server/ICT2WebService/helloResponse")
    public String hello(
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns java.lang.Boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "booleanAnd", targetNamespace = "http://server/", className = "server.BooleanAnd")
    @ResponseWrapper(localName = "booleanAndResponse", targetNamespace = "http://server/", className = "server.BooleanAndResponse")
    @Action(input = "http://server/ICT2WebService/booleanAndRequest", output = "http://server/ICT2WebService/booleanAndResponse")
    public Boolean booleanAnd(
        @WebParam(name = "a", targetNamespace = "")
        Boolean a,
        @WebParam(name = "b", targetNamespace = "")
        Boolean b);

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns java.lang.Boolean
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "safeBooleanAnd", targetNamespace = "http://server/", className = "server.SafeBooleanAnd")
    @ResponseWrapper(localName = "safeBooleanAndResponse", targetNamespace = "http://server/", className = "server.SafeBooleanAndResponse")
    @Action(input = "http://server/ICT2WebService/safeBooleanAndRequest", output = "http://server/ICT2WebService/safeBooleanAndResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/ICT2WebService/safeBooleanAnd/Fault/Exception")
    })
    public Boolean safeBooleanAnd(
        @WebParam(name = "a", targetNamespace = "")
        Boolean a,
        @WebParam(name = "b", targetNamespace = "")
        Boolean b)
        throws Exception_Exception
    ;

    /**
     * 
     * @return
     *     returns java.lang.Double
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isConnected", targetNamespace = "http://server/", className = "server.IsConnected")
    @ResponseWrapper(localName = "isConnectedResponse", targetNamespace = "http://server/", className = "server.IsConnectedResponse")
    @Action(input = "http://server/ICT2WebService/isConnectedRequest", output = "http://server/ICT2WebService/isConnectedResponse")
    public Double isConnected();

    /**
     * 
     * @param b
     * @return
     *     returns java.lang.Boolean
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addBooleanOnServer", targetNamespace = "http://server/", className = "server.AddBooleanOnServer")
    @ResponseWrapper(localName = "addBooleanOnServerResponse", targetNamespace = "http://server/", className = "server.AddBooleanOnServerResponse")
    @Action(input = "http://server/ICT2WebService/addBooleanOnServerRequest", output = "http://server/ICT2WebService/addBooleanOnServerResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/ICT2WebService/addBooleanOnServer/Fault/Exception")
    })
    public Boolean addBooleanOnServer(
        @WebParam(name = "b", targetNamespace = "")
        BooleanContainer b)
        throws Exception_Exception
    ;

    /**
     * 
     * @return
     *     returns java.lang.Integer
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNumberOfTrueValues", targetNamespace = "http://server/", className = "server.GetNumberOfTrueValues")
    @ResponseWrapper(localName = "getNumberOfTrueValuesResponse", targetNamespace = "http://server/", className = "server.GetNumberOfTrueValuesResponse")
    @Action(input = "http://server/ICT2WebService/getNumberOfTrueValuesRequest", output = "http://server/ICT2WebService/getNumberOfTrueValuesResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/ICT2WebService/getNumberOfTrueValues/Fault/Exception")
    })
    public Integer getNumberOfTrueValues()
        throws Exception_Exception
    ;

}
