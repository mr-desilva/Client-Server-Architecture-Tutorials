
package server;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Tutorial4WebService", targetNamespace = "http://server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Tutorial4WebService {


    /**
     * 
     * @return
     *     returns java.lang.Boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isConnected", targetNamespace = "http://server/", className = "server.IsConnected")
    @ResponseWrapper(localName = "isConnectedResponse", targetNamespace = "http://server/", className = "server.IsConnectedResponse")
    @Action(input = "http://server/Tutorial4WebService/isConnectedRequest", output = "http://server/Tutorial4WebService/isConnectedResponse")
    public Boolean isConnected();

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns java.lang.Double
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "divideWithException", targetNamespace = "http://server/", className = "server.DivideWithException")
    @ResponseWrapper(localName = "divideWithExceptionResponse", targetNamespace = "http://server/", className = "server.DivideWithExceptionResponse")
    @Action(input = "http://server/Tutorial4WebService/divideWithExceptionRequest", output = "http://server/Tutorial4WebService/divideWithExceptionResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/Tutorial4WebService/divideWithException/Fault/Exception")
    })
    public Double divideWithException(
        @WebParam(name = "a", targetNamespace = "")
        Double a,
        @WebParam(name = "b", targetNamespace = "")
        Double b)
        throws Exception_Exception
    ;

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns java.lang.Double
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addWithExceptions", targetNamespace = "http://server/", className = "server.AddWithExceptions")
    @ResponseWrapper(localName = "addWithExceptionsResponse", targetNamespace = "http://server/", className = "server.AddWithExceptionsResponse")
    @Action(input = "http://server/Tutorial4WebService/addWithExceptionsRequest", output = "http://server/Tutorial4WebService/addWithExceptionsResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/Tutorial4WebService/addWithExceptions/Fault/Exception")
    })
    public Double addWithExceptions(
        @WebParam(name = "a", targetNamespace = "")
        Double a,
        @WebParam(name = "b", targetNamespace = "")
        Double b)
        throws Exception_Exception
    ;

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns java.lang.Double
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "substractWithException", targetNamespace = "http://server/", className = "server.SubstractWithException")
    @ResponseWrapper(localName = "substractWithExceptionResponse", targetNamespace = "http://server/", className = "server.SubstractWithExceptionResponse")
    @Action(input = "http://server/Tutorial4WebService/substractWithExceptionRequest", output = "http://server/Tutorial4WebService/substractWithExceptionResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/Tutorial4WebService/substractWithException/Fault/Exception")
    })
    public Double substractWithException(
        @WebParam(name = "a", targetNamespace = "")
        Double a,
        @WebParam(name = "b", targetNamespace = "")
        Double b)
        throws Exception_Exception
    ;

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns java.lang.Double
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "multiplyWithException", targetNamespace = "http://server/", className = "server.MultiplyWithException")
    @ResponseWrapper(localName = "multiplyWithExceptionResponse", targetNamespace = "http://server/", className = "server.MultiplyWithExceptionResponse")
    @Action(input = "http://server/Tutorial4WebService/multiplyWithExceptionRequest", output = "http://server/Tutorial4WebService/multiplyWithExceptionResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/Tutorial4WebService/multiplyWithException/Fault/Exception")
    })
    public Double multiplyWithException(
        @WebParam(name = "a", targetNamespace = "")
        Double a,
        @WebParam(name = "b", targetNamespace = "")
        Double b)
        throws Exception_Exception
    ;

    /**
     * 
     * @param name
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hello", targetNamespace = "http://server/", className = "server.Hello")
    @ResponseWrapper(localName = "helloResponse", targetNamespace = "http://server/", className = "server.HelloResponse")
    @Action(input = "http://server/Tutorial4WebService/helloRequest", output = "http://server/Tutorial4WebService/helloResponse")
    public String hello(
        @WebParam(name = "name", targetNamespace = "")
        String name);

}
